buildscript {
	dependencies {
		classpath fileTree(dir: 'build/libs', include: '*.jar')
	}
}

apply plugin: 'exec'

nodeJsScripts {
	karma {
		scriptLocation = file("node_modules/karma/bin/karma")
		standardOutLogLevel = "DEBUG"
		standardErrorLogLevel = "ALWAYS"
	}
	
	bower {
		global = true
	}
}

executables {
    java {}
}

task installKarmaFromNpm << {
	npm.installPackage("karma")
}

task runKarma(dependsOn: installKarmaFromNpm) << { 
	try {
		nodeJsScripts.karma.run("start", "adsf")
	} catch (def e) {
		if (nodeJsScripts.karma.getStandardOut().trim().size() == 0)
			throw new RuntimeException("No StdOut Captured")
	}
}

task getBowerList << {
	nodeJsScripts.bower.run("list", "--paths")
	if (nodeJsScripts.bower.getStandardOut().trim().size() == 0)
		throw new RuntimeException("Unable to get Bower List results")
}

task installPhantomJs << {
	phantomJs.install file("$buildDir/phantomjs")
	nodeJsScripts.karma.environmentVariables.put("PHANTOMJS_BIN", phantomJs.getExecutableFile());
	
	println phantomJs.getExecutableFile()
	println nodeJsScripts.karma.environmentVariables
}

task getJavaVersion << {
    // Example of hitting the java executable directly
    java.run(["-version"], {
        println "Std Out: $it"
    }, {
        println "Std Err: $it"
    })

    // Example of using special methods built into the java executable
    println "Version: ${java.getVersion()}"
}